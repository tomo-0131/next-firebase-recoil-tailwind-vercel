import Head from 'next/head';
import { UseAuthContext } from '../context/AuthContext';
import { useRouter } from 'next/router';
import { useRecoilState } from 'recoil';
import { modalGuestLogin, modalLogin } from '../components/atoms/modalAtom';
ssimport Posts from '../components/Posts';
import Graphql from '../components/Graphql';
import ModalGuestLogin from '../components/ModalGuestLogin';
import { Tab, TabList, TabPanel, TabPanels, Tabs } from '@chakra-ui/react';
import { ApolloClient, gql, InMemoryCache } from '@apollo/client';
import { useState } from 'react';

export default function Home(results) {
  const { user }: any = UseAuthContext();

  const [open, setOpen] = useRecoilState(modalLogin);

  const [openGuestModal, setOpenGuestModal] = useRecoilState(modalGuestLogin);

  const router = useRouter();

  const initialState = results;

  const [characters, setCharacters] = useState(initialState.characters);

  return (
    <>
      <Head>
        <title>Talexy</title>
        <meta name='description' content='Generated by create next app' />
        <meta
          name='viewport'
          content='width=device-width,initial-scale=1.0,maximum-scale=1.0'
        ></meta>
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='h-full mb-12 bg-blue-50'>
        {user ? (
          <>
            <Tabs>
              <div className=''>
                <TabList className='w-full bg-white'>
                  <div className='flex ml-4 md:pl-96'>
                    <Tab _focus={{ boxShadow: 'none' }}>Posts</Tab>
                    <Tab _focus={{ boxShadow: 'none' }}>GraphQl</Tab>
                    {/* <Tab>Three</Tab> */}
                  </div>
                </TabList>
              </div>
              <TabPanels>
                <TabPanel>
                  <Posts />
                </TabPanel>
                <TabPanel>
                  <Graphql results={results} />
                </TabPanel>
                {/* <TabPanel>
                  <p>three!</p>
                </TabPanel> */}
              </TabPanels>
            </Tabs>
          </>
        ) : (
          // <Posts />
          <div className='flex grid items-center justify-center'>
            <h1 className='text-2xl my-3 p-5 text-center lg:text-3xl lg:p-9 lg:my-3'>⚡️Talexy</h1>
            <h1 className='text-2xl p-1 text-center lg:mb-8 lg:text-3xl'>
              Make your small goals come true!
            </h1>
            <img
              className='shadow-lg flex justify-center items-center my-4 mb-8'
              src='https://image.freepik.com/free-vector/business-team-work-process-steps-from-idea-target-business-workflow-business-process-efficiency-working-activity-pattern-concept-pinkish-coral-bluevector-isolated-illustration_335657-1649.jpg'
            />
            <div className='flex justify-center items-center'>
              <button
                onClick={() => setOpen(true)}
                className='bg-teal-500 text-white border m-2 p-1 w-40 rounded-lg hover:bg-teal-600'
              >
                Log in
              </button>
              <button
                onClick={() => router.push('/about')}
                className='border text-white bg-yellow-400 m-2 p-1 w-40 rounded-lg hover:bg-yellow-500'
              >
                About
              </button>
            </div>
            <button
              onClick={() => setOpenGuestModal(true)}
              className='bg-blue-500 text-white border m-2 p-1 w-40 ml-28 rounded-lg hover:bg-blue-600 lg:ml-56'
            >
              ゲストログイン
            </button>
            <ModalGuestLogin />
            <button
              onClick={() => router.push('/graphql')}
              className='bg-pink-500 text-white border m-2 inline p-1 w-40 ml-28 rounded-lg hover:bg-blue-600 lg:ml-56'
            >
              GraphQLを試す
            </button>
          </div>
        )}
      </div>
    </>
  );
}

export async function getServerSideProps() {
  const client = new ApolloClient({
    uri: process.env.NEXT_PUBLIC_URI,
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1) {
          results {
            id
            name
            species
            image
            episode {
              id
              name
            }
            location {
              id
              name
            }
          }
        }
      }
    `,
  });

  return {
    props: {
      characters: data.characters.results,
    },
  };
}
